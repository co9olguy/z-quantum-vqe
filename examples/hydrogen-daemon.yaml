ZapOSApiVersion: v1alpha1
kind: Workflow

resources:
- name: diatomic-molecule
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/tutorial-1-diatomic-molecule.git"
    branch: "master"
- name: z-quantum-core
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/z-quantum-core.git"
    branch: "master"
- name: qe-openfermion
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/qe-openfermion.git"
    branch: "master"
- name: qe-psi4
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/qe-psi4.git"
    branch: "master"
- name: z-quantum-vqe
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/z-quantum-vqe.git"
    branch: "master"
- name: z-quantum-optimizers
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/z-quantum-optimizers.git"
    branch: "fix-proxy"
- name: qe-forest
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/qe-forest.git"
    branch: "master"
- name: qe-qhipster
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/qe-qhipster.git"
    branch: "master"

metadata:
  generateName: test-optimizer-

spec:

  entrypoint: basis-set-loop
  arguments:
    parameters:
    - s3-bucket: quantum-engine
    - s3-key: projects/examples/testing/optimizer
    - evaluation-docker-image: 'open_pack_qhipster'
    - evaluation-docker-tag: 'latest'
    - docker-image: 'z-quantum-default'
    - docker-tag: 'latest'


  templates:

  # Loop over bond lengths

  - name: basis-set-loop
    steps:
    - - name: bond-length-loop
        template: bond-length-loop
        arguments:
          parameters:
          - basis: '{{item}}' # Note that quotes are needed here because of the curly braces
        withItems:
        - STO-3G
        # - 6-31G
        # - 6-311G

  - name: bond-length-loop
    inputs:
      parameters:
      - name: basis
    steps:
    - - name: run-h2
        template: run-h2
        arguments:
          parameters:
          - basis: '{{inputs.parameters.basis}}'
          - bond-length: '{{item}}'
        withItems: [0.60] #, 0.70, 0.80]

  - name: run-h2
    inputs:
      parameters:
      - name: basis
      - name: bond-length
    steps:
    - - name: create-molecule
        template: create-diatomic-molecule
        arguments:
          parameters:
          - species1: H
          - species2: H
          - bond-length: '{{inputs.parameters.bond-length}}'
          - resources: [diatomic-molecule, z-quantum-core]
          - docker-image: open_pack_psi4
          - docker-tag: latest


    - - name: run-psi4
        template: run-psi4
        arguments:
          artifacts:
          - geometry:
              from: '{{steps.create-molecule.outputs.artifacts.geometry}}'
          parameters:
          - basis: '{{inputs.parameters.basis}}'
          - method: scf # ccsd(t)
          - reference: rhf
          - nthreads: "4"
          - save-hamiltonian: 'True' # Boolean values must be put in quotes!
          - resources: [z-quantum-core, qe-openfermion, qe-psi4]
          - docker-image: qe-psi4
          - docker-tag: latest
    - - name: transform-hamiltonian
        template: transform-interaction-operator
        arguments:
          artifacts:
          - input-op:
              from: "{{steps.run-psi4.outputs.artifacts.hamiltonian}}"
          parameters:
          - transformation: Jordan-Wigner
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          - resources: [z-quantum-core, qe-openfermion]
    - - name: build-vqe-circuit-template
        template: build-vqe-circuit-template
        arguments:
          parameters:
          - ansatz-type: singlet UCCSD
          - n-alpha: "{{steps.run-psi4.outputs.parameters.n-alpha}}"
          - n-beta: "{{steps.run-psi4.outputs.parameters.n-beta}}"
          - n-mo: "{{steps.run-psi4.outputs.parameters.n-mo}}"
          - transformation: Jordan-Wigner
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          - resources: [z-quantum-core, qe-openfermion, z-quantum-vqe]
    - - name: generate-random-ansatz-params
        template: generate-random-ansatz-params
        arguments:
          parameters:
          - min-val: "-0.01"
          - max-val: "0.01"
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          - resources: [z-quantum-core]
          artifacts:
          - ansatz:
              from: "{{steps.build-vqe-circuit-template.outputs.artifacts.ansatz}}"

    - - name: start-proxy
        template: start-proxy
        arguments:
          parameters:
          - resources: [z-quantum-core, z-quantum-optimizers]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"

    - - name: run-optimizer
        template: run-optimizer
        arguments:
          parameters:
          - ip: '{{steps.start-proxy.ip}}'
          - resources: [z-quantum-core, z-quantum-optimizers]
          - optimizer-specs: "{'module_name': 'zquantum.optimizers.scipy_optimizer', 'function_name': 'ScipyOptimizer', 'method': 'L-BFGS-B', 'options': {'keep_value_history': True}}"
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          artifacts:
          - initial-parameters:
              from: '{{steps.generate-random-ansatz-params.outputs.artifacts.params}}'
      - name: start-evaluation-service
        template: start-evaluation-service
        arguments:
          parameters:
          - ip: '{{steps.start-proxy.ip}}'
          - resources: [z-quantum-core, qe-forest]
          - backend-specs: "{'module_name': 'zquantum.qhipster.simulator', 'function_name': 'QHipsterSimulator'}"
          artifacts:
          - ansatz:
              from: '{{steps.build-vqe-circuit-template.outputs.artifacts.ansatz}}'
          - qubit-operator:
              from: '{{steps.transform-hamiltonian.outputs.artifacts.transformed-op}}'

  - name: start-evaluation-service
    inputs:
      parameters:
      - name: ip
      - name: backend-specs
      artifacts:
      - name: ansatz
      - name: qubit-operator
    steps:
    - - name: wait-for-optimizer
        template: wait-for-optimizer
        arguments:
          parameters:
          - ip: "{{inputs.parameters.ip}}"
          - resources: [z-quantum-core, z-quantum-optimizers]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"

    - - name: circuit-parameter-evaluation
        template: circuit-parameter-evaluation
        arguments:
          parameters:
          - ip: "{{inputs.parameters.ip}}"
          - backend-specs: "{{inputs.parameters.backend-specs}}"
          artifacts:
          - ansatz:
              from: '{{inputs.artifacts.ansatz}}'
          - qubit-operator:
              from: '{{inputs.artifacts.qubit-operator}}'

  - name: circuit-parameter-evaluation
    inputs:
      parameters:
      - name: ip
      - name: backend-specs
      artifacts:
      - name: ansatz
      - name: qubit-operator
    steps:
    - - name: get-circuit-parameters
        template: get-argument-parameters
        arguments:
          parameters:
          - ip: "{{inputs.parameters.ip}}"
          - resources: [z-quantum-core]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"

    - - name: build-circuit
        template: build-ansatz-circuit
        arguments:
          artifacts:
          - ansatz:
              from: '{{inputs.artifacts.ansatz}}'
          - params:
              from: '{{steps.get-circuit-parameters.outputs.artifacts.argument-values}}'
          parameters:
          - resources: [z-quantum-core, qe-openfermion, z-quantum-vqe]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          

    - - name: get-expectation-values
        template: get-expectation-values-for-qubit-operator
        arguments:
          parameters:
          - backend-specs: "{{inputs.parameters.backend-specs}}"
          - docker-image: "{{workflow.parameters.evaluation-docker-image}}"
          - docker-tag: "{{workflow.parameters.evaluation-docker-tag}}"
          - resources: [z-quantum-core, qe-openfermion, qe-qhipster]
          artifacts:
          - circuit:
              from: '{{steps.build-circuit.outputs.artifacts.circuit}}'
          - qubit-operator:
              from: '{{inputs.artifacts.qubit-operator}}'
    - - name: calculate-energy
        template: evaluate-qubit-operator
        arguments:
          parameters:
          - resources: [z-quantum-core, qe-openfermion]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          artifacts:
          - expectation-values:
              from: '{{steps.get-expectation-values.outputs.artifacts.expectation-values}}'
          - qubit-operator:
              from: '{{inputs.artifacts.qubit-operator}}'

    - - name: post-energy
        template: finish-evaluation
        arguments:
          parameters:
          - ip: "{{inputs.parameters.ip}}"
          - evaluation-id: "{{steps.get-circuit-parameters.outputs.parameters.evaluation-id}}"
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          - resources: [z-quantum-core]
          artifacts:
          - evaluation-result:
              from: '{{steps.calculate-energy.outputs.artifacts.value-estimate}}'
    - - name: circuit-parameter-evaluation
        template: circuit-parameter-evaluation
        arguments:
          parameters:
          - ip: "{{inputs.parameters.ip}}"
          - backend-specs: "{{inputs.parameters.backend-specs}}"
          artifacts:
          - ansatz:
              from: '{{inputs.artifacts.ansatz}}'
          - qubit-operator:
              from: '{{inputs.artifacts.qubit-operator}}'
        when: '{{steps.post-energy.outputs.parameters.optimization-status}} == "EVALUATING"'
